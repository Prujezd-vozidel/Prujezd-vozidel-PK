{"version":3,"sources":["app.module.js","app.config.js","infoController.js","mainController.js","mapController.js","searchController.js","graphAverageSpeed.js","graphNumberVehicles.js","DeviceService.js","VehicleService.js"],"names":["angular","module","constant","APP_NAME","APP_VERSION","API_URL","API_TOKEN","DEFAULT_POSITION","lat","lng","DEFAULT_ZOOM","DEFAULT_ZOOM_MIN","DEFAULT_RANGE_DATE_DAY","from","to","DEFAULT_RANGE_TIME_HOUR","controller","$rootScope","$scope","$location","config","Device","Vehicle","this","$onInit","selectDevice","showInfoLoading","vehicles","urlExportCsv","query","data","response","graphShow","console","log","handleErrorResponse","$emit","$on","event","args","params","search","range","fromDate","moment","isValid","toDate","add","fromTime","hour","toTime","isTime","deviceId","id","direction","getRange","period","dateFrom","format","dateTo","timeFrom","timeTo","get","renderGraph","generateUrlExportCsv","relativeUrl","replace","paramsUrl","jQuery","param","changeRange","traffics","vehicle","color","labels","unique","map","d","date","useVehiclesIds","typeVehicleId","filterVehicles","grep","n","indexOf","datasetsNumberVehicles","datasetsAverageSpeed","i","traffic","datasetNumberVehicles","label","name","backgroundColor","borderColor","borderWidth","datasetAverageSpeed","fill","cubicInterpolationMode","pointRadius","l","j","length","push","numberVehicleAverage","numberVehicle","speedAverage","datasets","infoClose","$window","showLoadingScreen","onload","$apply","newUrl","oldUrl","historyUrl","q","isDirection","modalError","status","title","body","button","modal","clickButton","reloadApp","backdrop","keyboard","location","reload","markers","google","maps","Map","document","getElementById","center","zoom","minZoom","zoomControl","mapTypeControl","scaleControl","streetViewControl","rotateControl","fullscreenControl","mapTypeId","MapTypeId","ROADMAP","showDirection","lctn","createMarker","marker","Marker","position","infoWindow","InfoWindow","content","street","town","addListener","closeInfoWindows","open","setCenter","getPosition","setZoom","close","locations","showSearchLoading","searchLocations","address","component","template","canvas","getContext","graphLine","destroy","Chart","type","options","responsive","pointDot","legend","scales","xAxes","ticks","autoSkip","maxTicksLimit","yAxes","scaleLabel","display","labelString","beginAtZero","suggestedMax","tooltips","mode","intersect","callbacks","tooltipItems","yLabel","canvasGraphNumberVehicles","graphNumberVehicles","onResize","chart","size","height","update","stacked","factory","$resource","url","method","headers","Content-Type","Accept","jwt","isArray"],"mappings":"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","file":"app.min.js","sourcesContent":["angular.module('pvpk', ['ngResource', 'ngSanitize']);","angular.module('pvpk')\r\n    .constant('config', {\r\n        APP_NAME: 'PVPK',\r\n        APP_VERSION: '1.3.0',\r\n        API_URL: API_URL,\r\n        API_TOKEN: API_TOKEN,\r\n        DEFAULT_POSITION: {lat: 49.53, lng: 13.3},\r\n        DEFAULT_ZOOM: 10,\r\n        DEFAULT_ZOOM_MIN: 7,\r\n        DEFAULT_RANGE_DATE_DAY: {from: -30, to: -1},\r\n        DEFAULT_RANGE_TIME_HOUR: {from: 7, to: 16}\r\n    });","angular.module('pvpk')\r\n    .controller('infoController', ['$rootScope', '$scope', '$location', 'config', 'Device', 'Vehicle', function ($rootScope, $scope, $location, config, Device, Vehicle) {\r\n\r\n        this.$onInit = function () {\r\n            $rootScope.selectDevice = null;\r\n            $scope.showInfoLoading = false;\r\n            $scope.vehicles = [];\r\n            $scope.urlExportCsv = null;\r\n\r\n            Vehicle.query(null, function (data) {\r\n                $scope.vehicles = data;\r\n            }, function (response) {\r\n                $rootScope.graphShow = false;\r\n                console.log('Error api all Vehicles');\r\n                $rootScope.handleErrorResponse(response);\r\n            });\r\n\r\n            $rootScope.$emit('setRangeFromUrl', null);\r\n        };\r\n\r\n        $rootScope.$on('setRangeFromUrl', function (event, args) {\r\n            var params = $location.search();\r\n            $scope.range = {\r\n                fromDate: moment(params.fromDate, 'YYYY-MM-DD').isValid() ? moment(params.fromDate).toDate() : moment().add(config.DEFAULT_RANGE_DATE_DAY.from, 'd').toDate(),\r\n                toDate: moment(params.toDate, 'YYYY-MM-DD').isValid() ? moment(params.toDate).toDate() : moment().add(config.DEFAULT_RANGE_DATE_DAY.to, 'd').toDate(),\r\n                fromTime: moment(params.fromTime, 'HH:mm').isValid() ? moment(params.fromTime, 'HH:mm').toDate() : moment({hour: config.DEFAULT_RANGE_TIME_HOUR.from}).toDate(),\r\n                toTime: moment(params.toTime, 'HH:mm').isValid() ? moment(params.toTime, 'HH:mm').toDate() : moment({hour: config.DEFAULT_RANGE_TIME_HOUR.to}).toDate(),\r\n                isTime: params.isTime == 0 ? false : true\r\n            };\r\n        });\r\n\r\n        $rootScope.$on('infoLocation', function (event, args) {\r\n            $scope.showInfoLoading = true;\r\n\r\n            var params = $location.search();\r\n            params.deviceId = args.id;\r\n            params.direction = args.direction;\r\n            $location.search(params);\r\n\r\n            var range = $scope.getRange();\r\n\r\n            var query = {\r\n                period: range.isTime ? 'time-period' : 'day-period',\r\n                id: args.id,\r\n                direction: args.direction,\r\n                dateFrom: range.fromDate.format('YYYY-MM-DD'),\r\n                dateTo: range.toDate.format('YYYY-MM-DD'),\r\n                timeFrom: range.isTime ? range.fromTime.format('HH:mm') : null,\r\n                timeTo: range.isTime ? range.toTime.format('HH:mm') : null\r\n            };\r\n\r\n            Device.get(query, function (data) {\r\n                $rootScope.selectDevice = data;\r\n                $scope.renderGraph();\r\n                $scope.urlExportCsv = $scope.generateUrlExportCsv(query);\r\n\r\n                $scope.showInfoLoading = false;\r\n            }, function (response) {\r\n                $rootScope.selectDevice = null;\r\n                $scope.showInfoLoading = false;\r\n                console.log('Error api get Devices');\r\n                $rootScope.handleErrorResponse(response);\r\n            });\r\n\r\n        });\r\n\r\n        $scope.generateUrlExportCsv = function (query) {\r\n            var relativeUrl = '/devices/:id/:period/csv?'.replace(':id', query.id).replace(':period', query.period);\r\n            delete query.id;\r\n            delete query.period;\r\n\r\n            var paramsUrl = jQuery.param(query);\r\n            return config.API_URL + relativeUrl + paramsUrl;\r\n        };\r\n\r\n        $scope.changeRange = function () {\r\n            if ($scope.range.fromDate >= $scope.range.toDate || ($scope.range.isTime && $scope.range.fromTime >= $scope.range.toTime)) {\r\n                $rootScope.selectDevice.traffics = [];\r\n                return;\r\n            }\r\n\r\n            var range = $scope.getRange();\r\n\r\n            var params = $location.search();\r\n            params.fromDate = range.fromDate.format('YYYY-MM-DD');\r\n            params.toDate = range.toDate.format('YYYY-MM-DD');\r\n            params.fromTime = range.isTime ? range.fromTime.format('HH:mm') : null;\r\n            params.toTime = range.isTime ? range.toTime.format('HH:mm') : null;\r\n            params.isTime = range.isTime ? null : 0;\r\n            $location.search(params);\r\n\r\n            if ($rootScope.selectDevice)\r\n                $rootScope.$emit('infoLocation', {\r\n                    id: $rootScope.selectDevice.id,\r\n                    direction: $rootScope.selectDevice.direction\r\n                });\r\n        };\r\n\r\n        $scope.getRange = function () {\r\n            return {\r\n                fromDate: moment($scope.range.fromDate).isValid() ? moment($scope.range.fromDate) : moment().add(config.DEFAULT_RANGE_DATE_DAY.from, 'd'),\r\n                toDate: moment($scope.range.toDate).isValid() ? moment($scope.range.toDate) : moment().add(config.DEFAULT_RANGE_DATE_DAY.to, 'd'),\r\n                fromTime: moment($scope.range.fromTime).isValid() ? moment($scope.range.fromTime) : moment({hour: config.DEFAULT_RANGE_TIME_HOUR.from}),\r\n                toTime: moment($scope.range.toTime).isValid() ? moment($scope.range.toTime) : moment({hour: config.DEFAULT_RANGE_TIME_HOUR.to}),\r\n                isTime: $scope.range.isTime ? true : false\r\n            };\r\n        };\r\n\r\n        $scope.renderGraph = function () {\r\n            var color = ['rgba(158, 158, 158, #alpha)', 'rgba(213, 0, 0, #alpha)', 'rgba(0, 123, 255, #alpha)', 'rgba(170, 0, 255, #alpha)',\r\n                'rgba(0, 200, 83, #alpha)', 'rgba(255, 214, 0, #alpha)', 'rgba(255, 109, 0, #alpha)',\r\n                'rgba(174, 234, 0, #alpha)', 'rgba(98, 0, 234, #alpha)', 'rgba(255, 171, 0, #alpha)', 'rgba(100, 221, 23, #alpha)', 'rgba(0, 184, 212, #alpha)'];\r\n\r\n            var labels = jQuery.unique($rootScope.selectDevice.traffics.map(function (d) {\r\n                return $scope.range.isTime ? d.timeFrom : moment(d.date, 'YYYY-MM-DD').format('D.M.YYYY');\r\n            }));\r\n\r\n            var useVehiclesIds = jQuery.unique($rootScope.selectDevice.traffics.map(function (d) {\r\n                return d.typeVehicleId;\r\n            }));\r\n\r\n            var filterVehicles = jQuery.grep($scope.vehicles, function (n) {\r\n                return useVehiclesIds.indexOf(n.id) >= 0;\r\n            });\r\n\r\n            var datasetsNumberVehicles = [];\r\n            var datasetsAverageSpeed = [];\r\n\r\n            for (var i = 0, vehicle; vehicle = filterVehicles[i]; i++) {\r\n                var datasetNumberVehicles = {\r\n                    label: vehicle.name,\r\n                    backgroundColor: color[vehicle.id].replace(\"#alpha\", \"0.3\"),\r\n                    borderColor: color[vehicle.id].replace(\"#alpha\", \"1\"),\r\n                    borderWidth: 2,\r\n                    data: []\r\n                };\r\n\r\n                var datasetAverageSpeed = {\r\n                    data: [],\r\n                    borderWidth: 2,\r\n                    label: vehicle.name,\r\n                    fill: false,\r\n                    //fill: 'start',\r\n                    backgroundColor: color[vehicle.id].replace(\"#alpha\", \"0.3\"),\r\n                    borderColor: color[vehicle.id].replace(\"#alpha\", \"1\"),\r\n                    cubicInterpolationMode: 'monotone',\r\n                    pointRadius: 0\r\n                };\r\n\r\n                var l = 0;\r\n                for (var j = 0, traffic; traffic = $rootScope.selectDevice.traffics[j]; j++) {\r\n                    if (($scope.range.isTime && labels[l] !== traffic.timeFrom) || (!$scope.range.isTime && labels[l] !== moment(traffic.date, 'YYYY-MM-DD').format('D.M.YYYY'))) {\r\n                        l++;\r\n                        if (datasetNumberVehicles.data.length < l) {\r\n                            datasetNumberVehicles.data.push(0);\r\n                            datasetAverageSpeed.data.push(null);\r\n                        }\r\n                    }\r\n                    if (traffic.typeVehicleId === vehicle.id) {\r\n                        datasetNumberVehicles.data.push($scope.range.isTime ? traffic.numberVehicleAverage : traffic.numberVehicle);\r\n                        datasetAverageSpeed.data.push(traffic.speedAverage <= 0 ? null : traffic.speedAverage);\r\n                    }\r\n                }\r\n                datasetsNumberVehicles.push(datasetNumberVehicles);\r\n                datasetsAverageSpeed.push(datasetAverageSpeed);\r\n            }\r\n\r\n            $rootScope.$emit('renderGraphNumberVehicles', {\r\n                data: {\r\n                    labels: labels,\r\n                    datasets: datasetsNumberVehicles\r\n                }\r\n            });\r\n\r\n            $rootScope.$emit('renderGraphAverageSpeed', {\r\n                data: {\r\n                    labels: labels,\r\n                    datasets: datasetsAverageSpeed\r\n                }\r\n            });\r\n        };\r\n\r\n        $scope.infoClose = function () {\r\n            $rootScope.selectDevice = null;\r\n\r\n            var params = $location.search();\r\n            params.deviceId = null;\r\n            params.direction = null;\r\n            $location.search(params);\r\n\r\n            $rootScope.$emit('setDefaultMap', null);\r\n        };\r\n    }]);\r\n","angular.module('pvpk')\r\n    .controller('mainController', ['$rootScope', '$scope', '$location', '$window', function ($rootScope, $scope, $location, $window) {\r\n\r\n        this.$onInit = function () {\r\n            $scope.showLoadingScreen = true;\r\n        };\r\n\r\n        $window.onload = function () {\r\n            var params = $location.search();\r\n            if (params.deviceId) {\r\n                $rootScope.$emit('activeMarker', {id: params.deviceId});\r\n            }\r\n\r\n            $scope.$apply(function () {\r\n                $scope.showLoadingScreen = false;\r\n            });\r\n        };\r\n\r\n        $rootScope.$on('$locationChangeSuccess', function (event, newUrl, oldUrl) {\r\n            var params = $location.search();\r\n\r\n            if (newUrl !== oldUrl && $scope.historyUrl) {\r\n                if ($scope.historyUrl.q !== $scope.historyUrl.q || $scope.historyUrl.isDirection != params.isDirection) {\r\n                    $rootScope.$emit('setSearchFromUrl', null);\r\n                }\r\n\r\n                if ($scope.historyUrl.fromDate !== params.fromDate || $scope.historyUrl.toDate !== params.toDate ||\r\n                    $scope.historyUrl.fromTime !== params.fromTime || $scope.historyUrl.toTime !== params.toTime) {\r\n                    $rootScope.$emit('setRangeFromUrl', null);\r\n                    if (params.deviceId) {\r\n                        $rootScope.$emit('infoLocation', {id: params.deviceId, direction: params.direction});\r\n                    }\r\n                } else if (params.deviceId && ($scope.historyUrl.deviceId !== params.deviceId || $scope.historyUrl.direction !== params.direction)) {\r\n                    $rootScope.$emit('infoLocation', {id: params.deviceId, direction: params.direction});\r\n                    $rootScope.$emit('activeMarker', {id: params.deviceId});\r\n                } else if (!params.deviceId && $scope.historyUrl.deviceId) {\r\n                    $rootScope.selectDevice = null;\r\n                    $rootScope.$emit('setDefaultMap', null);\r\n                }\r\n            } else if (params.deviceId) {\r\n                $rootScope.$emit('infoLocation', {id: params.deviceId, direction: params.direction});\r\n            }\r\n\r\n            $scope.historyUrl = $location.search();\r\n        });\r\n\r\n        $rootScope.handleErrorResponse = function (response) {\r\n\r\n            var modalError = jQuery('#modalError');\r\n            switch (response.status) {\r\n                case 400:\r\n                    console.log('API ERROR 400');\r\n                    $scope.modalError = {\r\n                        title: 'Neplatný požadavek',\r\n                        body: 'Požadavek nemůže být vyřízen, poněvadž byl syntakticky nesprávně zapsán.',\r\n                        button: 'OK'\r\n                    };\r\n                    modalError.modal('show');\r\n                    break;\r\n                case 401:\r\n                    $scope.modalError = {\r\n                        title: 'Platnost webové aplikace vypršela',\r\n                        body: 'Pro obnovení platnosti stačí stisknout tlačítko <strong>Obnovit</strong>.',\r\n                        button: 'Obnovit',\r\n                        clickButton: $scope.reloadApp\r\n                    };\r\n                    modalError.modal({backdrop: 'static', keyboard: false});\r\n                    break;\r\n                case 404:\r\n                    console.log('API ERROR 404');\r\n                    $scope.modalError = {title: 'Nenalezen', body: 'Záznam nebyl nalezen.', button: 'OK'};\r\n                    modalError.modal('show');\r\n                    break;\r\n                case 500:\r\n                    console.log('API ERROR 500');\r\n                    $scope.modalError = {title: 'Chyba', body: 'Chyba serveru. Zopakujte akci později.', button: 'OK'};\r\n                    modalError.modal('show');\r\n                    break;\r\n                case -1:\r\n                    console.log('API NOT CONNECTED');\r\n                    $scope.modalError = {\r\n                        title: 'Připojení k internetu',\r\n                        body: 'Nejste připojeni k internetu. Zkontrolujte připojení.',\r\n                        button: 'OK'\r\n                    };\r\n                    modalError.modal('show');\r\n                    break;\r\n                default:\r\n                    console.log('API UNKNOWN ERROR');\r\n                    $scope.modalError = {title: 'Neočekávaná chyba', body: 'Nastala neočekávaná chyba.', button: 'OK'};\r\n                    modalError.modal('show');\r\n                    break;\r\n            }\r\n        };\r\n\r\n        $scope.reloadApp = function () {\r\n            $window.location.reload();\r\n        }\r\n    }]);","angular.module('pvpk')\r\n    .controller('mapController', ['$rootScope', '$scope', 'config', 'Device', function ($rootScope, $scope, config, Device) {\r\n\r\n        this.$onInit = function () {\r\n            $scope.markers = [];\r\n\r\n            $scope.map = new google.maps.Map(document.getElementById('map'), {\r\n                center: config.DEFAULT_POSITION,\r\n                zoom: config.DEFAULT_ZOOM,\r\n                minZoom: config.DEFAULT_ZOOM_MIN,\r\n                zoomControl: true,\r\n                mapTypeControl: false,\r\n                scaleControl: false,\r\n                streetViewControl: false,\r\n                rotateControl: false,\r\n                fullscreenControl: false,\r\n                mapTypeId: google.maps.MapTypeId.ROADMAP\r\n            });\r\n\r\n            Device.query({showDirection: 0}, function (data) {\r\n                for (var i = 0, lctn; lctn = data[i]; i++) {\r\n                    $scope.createMarker(lctn);\r\n                }\r\n            }, function (response) {\r\n                console.log('Error api all Devices');\r\n                $rootScope.handleErrorResponse(response);\r\n            });\r\n        };\r\n\r\n        $scope.createMarker = function (lctn) {\r\n            if (lctn.lat && lctn.lng) {\r\n                var marker = new google.maps.Marker({\r\n                    map: $scope.map,\r\n                    position: {lat: lctn.lat, lng: lctn.lng},\r\n                    title: lctn.name,\r\n                    infoWindow: new google.maps.InfoWindow({\r\n                        content: '<h6 class=\"mb-1\">' + lctn.name + '</h6>'\r\n                        + '<address>' + lctn.street + ', ' + lctn.town + '</address>'\r\n                    }),\r\n                    id: lctn.id\r\n                });\r\n\r\n                marker.addListener('click', function () {\r\n                    $scope.closeInfoWindows();\r\n                    marker.infoWindow.open($scope.map, marker);\r\n                    $rootScope.$emit('infoLocation', {id: lctn.id});\r\n                });\r\n\r\n                $scope.markers.push(marker);\r\n            }\r\n        };\r\n\r\n        $rootScope.$on('activeMarker', function (event, args) {\r\n            for (var i = 0, marker; marker = $scope.markers[i]; i++) {\r\n                if (marker.id && marker.id === args.id && marker.infoWindow) {\r\n                    $scope.map.setCenter(marker.getPosition());\r\n                    $scope.map.setZoom(12);\r\n                    marker.infoWindow.open($scope.map, marker);\r\n                } else {\r\n                    marker.infoWindow.close();\r\n                }\r\n            }\r\n        });\r\n\r\n        $rootScope.$on('setDefaultMap', function (event, args) {\r\n            $scope.map.setCenter(config.DEFAULT_POSITION);\r\n            $scope.map.setZoom(config.DEFAULT_ZOOM);\r\n            $scope.closeInfoWindows();\r\n        });\r\n\r\n        $scope.closeInfoWindows = function () {\r\n            for (var i = 0, marker; marker = $scope.markers[i]; i++) {\r\n                marker.infoWindow.close();\r\n            }\r\n        };\r\n    }]);","angular.module('pvpk')\r\n    .controller('searchController', ['$rootScope', '$scope', '$location', 'config', 'Device', function ($rootScope, $scope, $location, config, Device) {\r\n\r\n        this.$onInit = function () {\r\n            $scope.config = config;\r\n            $scope.locations = [];\r\n            $scope.showSearchLoading = false;\r\n\r\n            $rootScope.$emit('setSearchFromUrl', null);\r\n        };\r\n\r\n        $scope.searchLocations = function () {\r\n            var params = $location.search();\r\n            params.q = $scope.search.q;\r\n            params.isDirection = $scope.search.isDirection ? 1 : null;\r\n            $location.search(params);\r\n\r\n            if (!$scope.search.q || $scope.search.q.length <= 1) {\r\n                $scope.locations = [];\r\n                return;\r\n            }\r\n\r\n            $scope.showSearchLoading = true;\r\n\r\n            Device.query({\r\n                address: $scope.search.q,\r\n                showDirection: $scope.search.isDirection ? 1 : 0\r\n            }, function (data) {\r\n                $scope.locations = data;\r\n                $scope.showSearchLoading = false;\r\n            }, function (response) {\r\n                $scope.showSearchLoading = false;\r\n                console.log('Error api all Devices');\r\n                $rootScope.handleErrorResponse(response);\r\n            });\r\n        };\r\n\r\n        $rootScope.$on('setSearchFromUrl', function (event, args) {\r\n            var params = $location.search();\r\n            $scope.search = {\r\n                q: params.q,\r\n                isDirection: params.isDirection ? !!+params.isDirection : false\r\n            };\r\n            $scope.searchLocations();\r\n        });\r\n\r\n        $scope.selectDevice = function (id, direction) {\r\n            $rootScope.$emit('activeMarker', {id: id});\r\n            $rootScope.$emit('infoLocation', {id: id, direction: direction});\r\n        };\r\n\r\n    }]);","angular.module('pvpk')\r\n    .component('graphAverageSpeed', {\r\n        template: '<div><canvas id=\"graphAverageSpeed\" class=\"graphSize mb-5\"></canvas></div>',\r\n        controller: ['$rootScope', '$scope', function ($rootScope, $scope) {\r\n\r\n            $rootScope.$on('renderGraphAverageSpeed', function (event, args) {\r\n                var canvas = document.getElementById('graphAverageSpeed').getContext('2d');\r\n\r\n                if ($scope.graphLine)\r\n                    $scope.graphLine.destroy();\r\n\r\n                $scope.graphLine = new Chart(canvas, {\r\n                    type: 'line',\r\n                    data: args.data,\r\n                    options: {\r\n                        responsive: true,\r\n                        pointDot: false,\r\n                        legend: {\r\n                            position: 'bottom'\r\n                        },\r\n                        scales: {\r\n                            xAxes: [{\r\n                                ticks: {\r\n                                    autoSkip: true,\r\n                                    maxTicksLimit: 15\r\n                                }\r\n                            }],\r\n                            yAxes: [{\r\n                                scaleLabel: {\r\n                                    display: true,\r\n                                    labelString: 'km/h'\r\n                                },\r\n                                ticks: {\r\n                                    beginAtZero: true,\r\n                                    suggestedMax: 70\r\n                                }\r\n                            }]\r\n                        },\r\n                        tooltips: {\r\n                            mode: 'index',\r\n                            intersect: false,\r\n                            callbacks: {\r\n                                label: function (tooltipItems) {\r\n                                    return tooltipItems.yLabel + ' km/h';\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n            });\r\n\r\n        }]\r\n    });","angular.module('pvpk')\r\n    .component('graphNumberVehicles', {\r\n        template: '<div><canvas id=\"graphNumberVehicles\" class=\"graphSize mb-5\"></canvas></div>',\r\n        controller: ['$rootScope', '$scope', function ($rootScope, $scope) {\r\n\r\n            $rootScope.$on('renderGraphNumberVehicles', function (event, args) {\r\n                var canvasGraphNumberVehicles = document.getElementById('graphNumberVehicles').getContext('2d');\r\n\r\n                if ($scope.graphNumberVehicles)\r\n                    $scope.graphNumberVehicles.destroy();\r\n\r\n                $scope.graphNumberVehicles = new Chart(canvasGraphNumberVehicles, {\r\n                    type: 'bar',\r\n                    data: args.data,\r\n                    options: {\r\n                        responsive: true,\r\n                        onResize: function (chart, size) {\r\n                            chart.options.legend.display = size.height > 240;\r\n                            chart.update();\r\n                        },\r\n                        legend: {\r\n                            position: 'bottom'\r\n                        },\r\n                        scales: {\r\n                            xAxes: [{\r\n                                stacked: true,\r\n                                ticks: {\r\n                                    autoSkip: true,\r\n                                    maxTicksLimit: 15\r\n                                }\r\n                            }],\r\n                            yAxes: [{\r\n                                scaleLabel: {\r\n                                    display: true,\r\n                                    labelString: \"počet vozidel\"\r\n                                },\r\n                                stacked: true\r\n                            }]\r\n                        },\r\n                        tooltips: {\r\n                            mode: 'index',\r\n                            intersect: false\r\n                        }\r\n                    }\r\n                });\r\n\r\n            });\r\n\r\n        }]\r\n    });","angular.module('pvpk')\r\n    .factory('Device', ['$resource', 'config', function ($resource, config) {\r\n        return $resource(config.API_URL + '/devices/:id', {id: '@id', period: '@period'}, {\r\n            'get': {\r\n                url: config.API_URL + '/devices/:id/:period',\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'jwt': config.API_TOKEN\r\n                }\r\n            },\r\n            'query': {\r\n                url: config.API_URL + '/devices',\r\n                method: 'GET',\r\n                isArray: true,\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'jwt': config.API_TOKEN\r\n                }\r\n            }\r\n        });\r\n    }]);","angular.module('pvpk')\r\n    .factory('Vehicle', ['$resource', 'config', function ($resource, config) {\r\n        return $resource(config.API_URL + '/vehicles', null, {\r\n            'query': {\r\n                url: config.API_URL + '/vehicles',\r\n                method: 'GET',\r\n                isArray: true,\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                    'jwt': config.API_TOKEN\r\n                }\r\n            }\r\n        });\r\n    }]);"]}